<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://simplehanlab.github.io/tag/jekyll/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://simplehanlab.github.io/" rel="alternate" type="text/html" />
  <updated>2021-09-13T01:50:55+00:00</updated>
  <id>https://simplehanlab.github.io/tag/jekyll/feed.xml</id>

  
  
  

  
    <title type="html">SimpleHan Lab | </title>
  

  
    <subtitle>기록 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">minimal-mistakes에 Google Analytics 연동하기</title>
      <link href="https://simplehanlab.github.io/google-analytics" rel="alternate" type="text/html" title="minimal-mistakes에 Google Analytics 연동하기" />
      <published>2019-08-09T15:00:00+00:00</published>
      <updated>2019-08-09T15:00:00+00:00</updated>
      <id>https://simplehanlab.github.io/google-analytics</id>
      <content type="html" xml:base="https://simplehanlab.github.io/google-analytics">&lt;p&gt;블로그를 운영하는데 통계가 필요하다. 다행히 minimal-mistake 테마에서 Google Analytics 연동을 지원한다. 그래서 Google Analytics와 블로그를 연동해보기로 했다. (Google Analytics 외에 다른 통계 소스 연동도 지원하고 커스텀을 하는 방법도 지원한다. 커스텀을 이용하는 방법은 아직 해본 적이 없다.)&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&quot;https://analytics.google.com/analytics/web/&quot;&gt;Google Analytics 사이트&lt;/a&gt;로 이동하자.&lt;/p&gt;

&lt;p&gt;처음 접속을 하면 “무료로 이용하기” 와 같은 글이 떠있는 것을 보니 무료인 것 같다. &lt;em&gt;(해당 첫 접속 페이지 이미지를 깜빡하고 캡처하지 못해서 남기질 못했다. 가입 후에는 나오질 않아서 추후 이미지를 얻게 되면 업로드 예정.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\create-account.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계정 가입 시 첫번째로 위와 같이 계정 이름을 입력해줘야 한다. 이 계정 이름은 자신이 원하는 대로 지정해주자. 그 후 자신에게 필요한 옵션을 아래 체크박스에서 체크한 뒤 &lt;strong&gt;다음&lt;/strong&gt;을 눌러주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\create-account-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음으로 자신의 측정 대상을 선택해주자. 나는 웹 기반의 이 블로그를 측정할 것이기 때문에 &lt;strong&gt;웹&lt;/strong&gt;을 선택했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\create-account-3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 자신의 측정 대상의 정보를 입력해주자. 나는 웹을 선택했기 때문에 위와 같이 나오는데 다른 대상을 선택했으면 다른 세부정보 입력 화면이 나오니 잘 읽고 입력해주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\create-account-4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가입이 완료되면 위와 같이 &lt;strong&gt;&lt;em&gt;추적 id (tracking id)&lt;/em&gt;&lt;/strong&gt;를 확인할 수가 있는데 이를 복사해두자.&lt;/p&gt;

&lt;p&gt;그 후 minimal-mistakes 기반 블로그의 _config.yml 파일을 열면 analytics 항목이 있는데 아래와 같이 작성해주자.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;analytics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;google&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tracking_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;위에서&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;복사한&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;추적&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;anonymize_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# true, false (default)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 후 블로그에 설정을 반영한 뒤 analytics 사이트에서 통계가 제대로 집계되고 있는 지 확인해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\analytics-home.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제대로 집계가 된다면 블로그 접속 시 analytics 홈에 위와 같이 현재 활성 사용자가 카운트된다. 집계가 되는 것이 확인되면 좌측 메뉴에서 여러가지 통계를 볼 수 있으니 잘 활용해보자.&lt;/p&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&quot;q1--추적-id를-어디서-확인하는-지-모르겠어요&quot;&gt;Q1 : 추적 ID를 어디서 확인하는 지 모르겠어요.&lt;/h3&gt;

&lt;p&gt;추적 ID는 기본적으로 최초에 계정을 생성하면 생성 완료 후 보여주게 되는데, 이를 확인하지 못했거나 웹사이트 에러, 브라우자 에러 등등 모종의 이유로 확인을 하지 못했을 시를 대비해서 추후에 확인할 수 있는 방법이 있다. 아래 이미지를 보고 추적 ID를 확인하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\google-analytics\tracking-id.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;좌측 하단의 &lt;strong&gt;관리&lt;/strong&gt; 클릭.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;속성&lt;/strong&gt; 탭 확인&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;추적 정보&lt;/strong&gt; 탭의 &lt;strong&gt;추적 코드&lt;/strong&gt; 클릭.&lt;/li&gt;
  &lt;li&gt;상단의 &lt;strong&gt;추적 ID&lt;/strong&gt; 확인.&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      <author>
          <name>Simplehan</name>
        
        
      </author>

      

      
        <category term="github pages" />
      
        <category term="jekyll" />
      
        <category term="minimal-mistakes" />
      
        <category term="Google Analytics" />
      

      
        <summary type="html">블로그를 운영하는데 통계가 필요하다. 다행히 minimal-mistake 테마에서 Google Analytics 연동을 지원한다. 그래서 Google Analytics와 블로그를 연동해보기로 했다. (Google Analytics 외에 다른 통계 소스 연동도 지원하고 커스텀을 하는 방법도 지원한다. 커스텀을 이용하는 방법은 아직 해본 적이 없다.)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">VSCode, Typora를 이용하여 jekyll 포스트 작성하기 (with minimal-mistakes)</title>
      <link href="https://simplehanlab.github.io/write-post" rel="alternate" type="text/html" title="VSCode, Typora를 이용하여 jekyll 포스트 작성하기 (with minimal-mistakes)" />
      <published>2019-08-01T17:00:00+00:00</published>
      <updated>2019-08-01T17:00:00+00:00</updated>
      <id>https://simplehanlab.github.io/write-post</id>
      <content type="html" xml:base="https://simplehanlab.github.io/write-post">&lt;p&gt;jekyll 포스트를 작성하는 방법에 대해 작성하려 한다. 나는 공개된 테마 중 minimal-mistakes 테마를 이용하고 있으므로 해당 테마 기반으로 글을 작성한다. 그리고 jekyll 사용 편의성을 높히기 위해 VSCode와 Typora를 같이 이용하기로 하였다.&lt;/p&gt;

&lt;p&gt;jekyll, minimal-mistakes 등에 관한 설명은 지난 포스트를 참조하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://simplehanlab.github.io/jekyll/minimal-mistakes/run-on-local/&quot;&gt;minimal-mistakes 테마 로컬에서 구동하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;포스트 작성 전에 VSCode와 Typora를 설치해보자.&lt;/p&gt;

&lt;h2 id=&quot;vscode-설치&quot;&gt;VSCode 설치&lt;/h2&gt;

&lt;p&gt;VSCode는 Visual Studio Code의 약칭으로 마이크로소프트가 제작한 소스 코드 편집기이다. 이를 이용해서 jekyll 프로젝트의 편집을 할 계획이다.&lt;/p&gt;

&lt;p&gt;VSCode를 받기 위해서 &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode 사이트&lt;/a&gt;에 접속한다. 사이트에서 Installer를 다운로드 받자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\vscode-site.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VSCode 설치가 끝난 뒤 실행을 해보면 아래와 같은 화면이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\vscode-exec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VSCode의 폴더 열기를 이용하여 자신의 소스 코드 폴더를 열면 아래처럼 화면이 변한다. 이제부터 소스 코드 편집을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\vscode-load-folder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;typora-설치&quot;&gt;Typora 설치&lt;/h2&gt;

&lt;p&gt;VSCode를 이용하여 파일을 빠르게 작성하는 것은 좋으나, jekyll 포스트는 기본적으로 파일 형식이 md이다. md파일은 마크다운 포맷으로 구성되기 때문에 작성과 출력에 차이가 있다. 이 포맷을 작성하는 도중에도 확인할 수 있다면 더욱 편하게 포스트 작성이 가능하기 때문에 마크다운 에디터인 Typora를 이용하기로 했다.&lt;/p&gt;

&lt;p&gt;Typora를 설치하기 위해 &lt;a href=&quot;https://typora.io/&quot;&gt;Typora 사이트&lt;/a&gt;에 접속한다. Download 탭에서 자신의 OS에 맞는 버전을 선택하여 다운받는다. (나는 Windows로 진행하였다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\typora-site.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typora를 다운받은 뒤 실행해보면 아래와 같은 화면이 나온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\typora-exec.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제부터 Typora를 이용하여 마크다운 문서를 작성할 수 있다. Typora의 다양한 기능을 이용하여 마크다운 문서를 작성해보자.&lt;/p&gt;

&lt;p&gt;Typora 상단 메뉴 중 본문, 서식 등을 이용하여 문서를 작성할 수 있는데 문서를 작성하면 실시간으로 마크다운 문서가 어떻게 해석되서 나타나는 지 볼 수 있다. 아래 이미지처럼 말이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\typora-p.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\typora-basic.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 소스 코드 상태로도 볼 수 있는데 Typora 아래쪽의 &lt;strong&gt;&amp;lt;/&amp;gt;&lt;/strong&gt; 아이콘을 클릭하면 소스 코드 모드로 변환된다. 이 상태에서 위의 문서를 보게 되면 아래와 같이 변한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\typora-source.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 작성한 이 포스트도 Typora에서 작성한 포스트이다. 앞으로 포스트들은 이를 이용해서 작성될 예정이다.&lt;/p&gt;

&lt;p&gt;이제 준비가 끝났으니 VSCode를 이용하여 첫 포스트를 작성해보자.&lt;/p&gt;

&lt;h2 id=&quot;포스트-작성하기&quot;&gt;포스트 작성하기&lt;/h2&gt;

&lt;p&gt;포스트를 작성하기 위해선 일단 &lt;strong&gt;_posts&lt;/strong&gt; 폴더가 필요하다. jekyll은 _posts 폴더에 특정한 이름의 마크다운 파일을 자동으로 포스트로 인식한다. 이 폴더가 있다면 상관없지만 없다면 다음과 같이 폴더를 생성해주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\mkdir-posts.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;폴더를 생성했다면 다음으로 포스트를 작성해볼 차례인데, 주의점이 있다. 파일의 이름 형식을 꼭 맞춰줘야 하는데, 파일 형식은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;YEAR : 4자리의 숫자&lt;br /&gt;
MONTH, DAY : 2자리의 숫자&lt;br /&gt;
title : 포스트 제목 (파일 이름 정도로 인식하면 된다.)&lt;br /&gt;
MARKUP : 마크다운 포맷이 인식되는 확장자&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;이를 토대로 만들어진 올바른 포스트 파일명은 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2011-12-31-new-years-eve-is-awesome.md&lt;br /&gt;
2012-09-12-how-to-write-a-blog.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 첫 포스트를 작성해보자. 파일 이름은 &lt;strong&gt;2019-08-01-first-post.md&lt;/strong&gt; 로 지정했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\first-post.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 간단히 글을 작성해보자. jekyll 문서들은 첫 문단에 머리글(Front Matter)을 작성할 수 있는데 문서의 각종 설정, 메타 데이터라고 인식하면 된다. 첫 포스트의 머리글은 아래와 같이 작성할 수 있는데 이미지 아래에서 설명하겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\front-matter.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이름&lt;/th&gt;
      &lt;th&gt;기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;포스트 제목&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;categories&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;포스트 카테고리 정의&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;tags&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;포스트 태그 정의&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;date&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;작성일&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이 외에도 정말 다양한 설정값이 존재하나 추후 포스트에서 설명하겠다.&lt;/p&gt;

&lt;p&gt;머리글 작성이 끝나면 그 아래에 작성하는 내용이 포스트의 본문이 된다. 테스트용으로 간단하게 작성해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\write-first-post.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;작성이 다 끝났으면 자신의 로컬서버, 혹은 github pages 서버에서 포스트가 잘 작성되었는지 확인해보자. &lt;em&gt;(github pages를 이용하는 방법은 추후 포스팅 예정이다.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\write-post\check-first-post.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 포스트가 잘 올라간 모습을 볼 수 있다. &lt;em&gt;(나는 minimal-mistakes 테마의 다른 설정들도 건드린 상태이기 때문에 순정 상태와 모습이 다르다.)&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Simplehan</name>
        
        
      </author>

      

      
        <category term="github pages" />
      
        <category term="jekyll" />
      
        <category term="minimal-mistakes" />
      
        <category term="VSCode" />
      
        <category term="Typora" />
      

      
        <summary type="html">jekyll 포스트를 작성하는 방법에 대해 작성하려 한다. 나는 공개된 테마 중 minimal-mistakes 테마를 이용하고 있으므로 해당 테마 기반으로 글을 작성한다. 그리고 jekyll 사용 편의성을 높히기 위해 VSCode와 Typora를 같이 이용하기로 하였다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">minimal-mistakes 테마 로컬에서 구동하기</title>
      <link href="https://simplehanlab.github.io/run-on-local" rel="alternate" type="text/html" title="minimal-mistakes 테마 로컬에서 구동하기" />
      <published>2019-07-30T11:00:00+00:00</published>
      <updated>2019-07-30T11:00:00+00:00</updated>
      <id>https://simplehanlab.github.io/run-on-local</id>
      <content type="html" xml:base="https://simplehanlab.github.io/run-on-local">&lt;p&gt;블로그를 시작하였다. 처음엔 티스토리를 이용하여 블로그를 개설하려 했으나 github에서 무료로 제공하는 &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;github pages&quot;&gt;github pages&lt;/a&gt; 호스팅 서비스가 있길래 이를 이용해보기로 했다. github pages는 &lt;a href=&quot;https://jekyllrb-ko.github.io/&quot; title=&quot;jekyll&quot;&gt;jekyll&lt;/a&gt;로 동작하기 때문에 jekyll의 공개된 테마 중 인기가 많은 &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot; title=&quot;minimal-mistakes github&quot;&gt;minimal-mistakes&lt;/a&gt; 테마를 이용하였다.&lt;/p&gt;

&lt;p&gt;이 jekyll &lt;em&gt;(혹은 jekyll 기반의 테마)&lt;/em&gt;을 이용하여 자신만의 페이지를 구성 후 github의 repository에 소스를 push하면 해당 소스가 배포되어 정적 웹 사이트가 호스팅되기 시작한다.&lt;/p&gt;

&lt;p&gt;그러나 push를 한다고 해서 반영 및 배포가 바로바로 되지는 않기 때문에 지금 보고 있는 페이지가 수정이 완료가 된건지, 아직 배포가 안된건지 알기가 힘들다. 그리고 잘못 수정된 파일이 올라갈수도 있다. 이러한 문제점들을 방지하기 위해 local 환경에서 사이트를 띄워볼 수 있는데 여기에서 그 방법을 설명하려 한다.&lt;/p&gt;

&lt;h2 id=&quot;git-설치&quot;&gt;Git 설치&lt;/h2&gt;

&lt;p&gt;minimal-mistakes 테마는 github에 올라가 있기 때문에 이 소스를 내려받기 위해선 git이 필요하다. &lt;em&gt;(git이 없어도 zip 파일로 소스를 내려받을 순 있지만 추후 자신의 소스를 github에 올리기 위해서도 필요하기 때문에 git을 설치하는 것이 좋다.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;git을 설치하기 위해서 &lt;a href=&quot;https://git-scm.com/downloads&quot; title=&quot;git 다운로드 페이지&quot;&gt;git 다운로드 페이지&lt;/a&gt;에 접속하자. 다운로드 페이지에서 자신의 OS에 맞게 다운로드를 받아서 설치를 진행하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\run-on-local\git-download.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;특별히 옵션을 선택할 게 없으면 Next만 쭉 눌러서 설치해주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\run-on-local\git-installer.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;git 설치가 완료되면 cmd, powershell, git bash 등의 터미널에서 git을 이용할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\run-on-local\git-bash.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 이미지는 git bash에서 git 버전을 확인해본 모습이다.&lt;/p&gt;

&lt;h2 id=&quot;minimal-mistakes-소스코드-내려받기&quot;&gt;minimal-mistakes 소스코드 내려받기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot; title=&quot;minimal-mistakes github&quot;&gt;minimal-mistakes github&lt;/a&gt;에서 소스를 clone 한다. &lt;strong&gt;cmd&lt;/strong&gt;에서 진행했다. &lt;em&gt;(minimal-mistakes github에서 자신의 github로 fork 받는 방법도 있다. 본인이 편한 방법으로 소스를 내려받자.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;git clone https://github.com/mmistakes/minimal-mistakes.git
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;clone받은 소스에서 불필요한 파일들을 제거해야된다. 그 파일들은 다음과 같다:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitattributes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/docs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistakes-jekyll.gemspec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screenshot-layouts.png&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;screenshot.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러면 아래와 같은 구조가 완성된다. &lt;em&gt;(구조가 100% 맞지 않을 수 있다.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minimal-mistakes
├── _data                      &lt;span class=&quot;c&quot;&gt;# 테마 커스터마이징 데이터&lt;/span&gt;
|  ├── navigation.yml          &lt;span class=&quot;c&quot;&gt;# 네비게이션(메뉴) 데이터&lt;/span&gt;
|  └── ui-text.yml             &lt;span class=&quot;c&quot;&gt;# UI의 텍스트 (언어별)&lt;/span&gt;
├── _includes
|  ├── analytics-providers     &lt;span class=&quot;c&quot;&gt;# snippets for analytics (Google and custom)&lt;/span&gt;
|  ├── comments-providers      &lt;span class=&quot;c&quot;&gt;# snippets for comments&lt;/span&gt;
|  ├── footer                  &lt;span class=&quot;c&quot;&gt;# custom snippets to add to site footer&lt;/span&gt;
|  ├── &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# custom snippets to add to site head&lt;/span&gt;
|  ├── feature_row             &lt;span class=&quot;c&quot;&gt;# feature row helper&lt;/span&gt;
|  ├── gallery                 &lt;span class=&quot;c&quot;&gt;# image gallery helper&lt;/span&gt;
|  ├── group-by-array          &lt;span class=&quot;c&quot;&gt;# group by array helper for archives&lt;/span&gt;
|  ├── nav_list                &lt;span class=&quot;c&quot;&gt;# navigation list helper&lt;/span&gt;
|  ├── toc                     &lt;span class=&quot;c&quot;&gt;# table of contents helper&lt;/span&gt;
|  └── ...
├── _layouts
|  ├── archive-taxonomy.html   &lt;span class=&quot;c&quot;&gt;# tag/category archive for Jekyll Archives plugin&lt;/span&gt;
|  ├── archive.html            &lt;span class=&quot;c&quot;&gt;# 아카이브&lt;/span&gt;
|  ├── categories.html         &lt;span class=&quot;c&quot;&gt;# 카테고리로 묶은 아카이브&lt;/span&gt;
|  ├── category.html           &lt;span class=&quot;c&quot;&gt;# 특정 카테고리로 묶은 아카이브&lt;/span&gt;
|  ├── collection.html         &lt;span class=&quot;c&quot;&gt;# 특정 콜렉션으로 묶은 아카이브&lt;/span&gt;
|  ├── compress.html           &lt;span class=&quot;c&quot;&gt;# compresses HTML in pure Liquid&lt;/span&gt;
|  ├── default.html            &lt;span class=&quot;c&quot;&gt;# 기본&lt;/span&gt;
|  ├── home.html               &lt;span class=&quot;c&quot;&gt;# 홈&lt;/span&gt;
|  ├── posts.html              &lt;span class=&quot;c&quot;&gt;# 년도별로 묶은 아카이브&lt;/span&gt;
|  ├── search.html             &lt;span class=&quot;c&quot;&gt;# 검색&lt;/span&gt;
|  ├── single.html             &lt;span class=&quot;c&quot;&gt;# single document (post/page/etc)&lt;/span&gt;
|  ├── tag.html                &lt;span class=&quot;c&quot;&gt;# 특정 태그로 묶은 아카이브&lt;/span&gt;
|  ├── tags.html               &lt;span class=&quot;c&quot;&gt;# 태그로 묶은 아카이브&lt;/span&gt;
|  └── splash.html             &lt;span class=&quot;c&quot;&gt;# 스플래시 페이지&lt;/span&gt;
├── _sass                      &lt;span class=&quot;c&quot;&gt;# SCSS&lt;/span&gt;
├── assets
|  ├── css
|  |  └── main.scss            &lt;span class=&quot;c&quot;&gt;# main stylesheet, loads SCSS partials from _sass&lt;/span&gt;
|  ├── images                  &lt;span class=&quot;c&quot;&gt;# image assets for posts/pages/collections/etc.&lt;/span&gt;
|  ├── js
|  |  ├── plugins              &lt;span class=&quot;c&quot;&gt;# jQuery plugins&lt;/span&gt;
|  |  ├── vendor               &lt;span class=&quot;c&quot;&gt;# vendor scripts&lt;/span&gt;
|  |  ├── _main.js             &lt;span class=&quot;c&quot;&gt;# plugin settings and other scripts to load after jQuery&lt;/span&gt;
|  |  └── main.min.js          &lt;span class=&quot;c&quot;&gt;# optimized and concatenated script file loaded before &amp;lt;/body&amp;gt;&lt;/span&gt;
├── _config.yml                &lt;span class=&quot;c&quot;&gt;# 설정파일&lt;/span&gt;
├── Gemfile                    &lt;span class=&quot;c&quot;&gt;# gem file dependencies&lt;/span&gt;
├── index.html                 &lt;span class=&quot;c&quot;&gt;# 인덱스&lt;/span&gt;
└── package.json               &lt;span class=&quot;c&quot;&gt;# NPM build scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;minimal-mistakes 테마를 받는 방법은 clone, fork 외에도 존재한다. gem기반으로 내려받는 방법도 있고, config 파일에서 remote를 지정하여 소스를 내려받지 않고 network 상으로 이용하는 방법도 존재한다. 해당 방법들은 minimal-mistakes 가이드 글의 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot; title=&quot;minimal-mistakes: 'Quick-Start Guide'&quot;&gt;Quick-Start Guide&lt;/a&gt;를 참조하자.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby-설치&quot;&gt;Ruby 설치&lt;/h2&gt;

&lt;p&gt;minimal-mistakes 테마는 위에서도 언급했다시피 jekyll 기반으로 만들어져 있다. 그러므로 이 소스를 로컬 환경에서 구동하기 위해선 jekyll이 필요한데, jekyll은 Gem이라는 Ruby 기반의 패키지 매니저를 통해서 받을 수 있다. 이를 위해 먼저 Ruby를 설치해야 한다. &lt;a href=&quot;https://rubyinstaller.org/downloads/&quot; title=&quot;RubyInstaller Site&quot;&gt;RubyInstaller&lt;/a&gt;에 접속해서 Installer를 다운받도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\run-on-local\rubyinstaller.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 중에 MSYS2 development toolchain도 설치할건지 체크박스가 나오는데 같이 설치해주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\run-on-local\MSYS2_type.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치중에 위와 같이 선택지가 나오는데 1번 옵션 (MSYS2 base installation)을 선택해서 설치했다.&lt;/p&gt;

&lt;p&gt;Devkit이 포함된 Ruby를 설치하면 Gem도 사용이 가능해진다. 이제 gem을 이용해서 jekyll과 gem 관리를 위한 bundler를 설치해보자. 진행은 &lt;strong&gt;Windows cmd&lt;/strong&gt;에서 진행했다.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;gem install jekyll bundler
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 소스코드 폴더로 들어가서 의존성들을 다운로드 받아준다.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;bundle install
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;의존성 다운로드가 끝나면 구동을 해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve	&lt;span class=&quot;c&quot;&gt;# --port xxxx 옵션을 통하여 포트 지정 가능&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;포트를 지정했다면 해당 포트로, 포트를 지정하지 않았다면 4000 포트로 접속 시 블로그가 뜨면 성공.&lt;/p&gt;

&lt;h2 id=&quot;에러-case&quot;&gt;에러 case&lt;/h2&gt;

&lt;h3 id=&quot;invalid-cp949-character-xe2&quot;&gt;Invalid CP949 character “\xE2”&lt;/h3&gt;

&lt;p&gt;로컬에서 구동 시 아래와 같은 에러가 출력될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Conversion error: Jekyll::Converters::Scss encountered an error while converting 'assets/css/main.scss':
                    Invalid CP949 character &quot;\xE2&quot; on line 54
jekyll 3.8.5 | Error:  Invalid CP949 character &quot;\xE2&quot; on line 54
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jekyll 홈페이지에서 windows 환경에서 구동 시 인코딩에 문제가 있다고 소개하고 있는데 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 UTF-8 인코딩을 사용한다면, 문서 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOM&lt;/code&gt; 헤더를 사용하지 않아야 합니다. 그렇지 않으면 Jekyll 에 아주, 아주 안 좋은 일이 벌어집니다. 이는 특히, 윈도우즈에서 Jekyll 을 사용하는 것에 연관된 문제입니다.&lt;/p&gt;

  &lt;p&gt;그리고, 사이트 생성 단계에서 “Liquid Exception: Incompatible character encoding” 에러가 발생하는 경우엔, 콘솔창의 코드 페이지를 UTF-8 로 바꿔야 할 수도 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이를 위한 해결법 역시 적혀있는데 terminal에서 다음과 같이 입력을 해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;chcp 65001
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 terminal에서 Active code page: 65001 이라는 텍스트가 출력이 되는데 이제 아래의 실행코드를 실행하면 서버가 구동되는 모습을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve	// --port xxxx 옵션을 통하여 포트 지정 가능
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb-ko.github.io/docs/windows/#%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;http://jekyllrb-ko.github.io/docs/windows/#%EC%9D%B8%EC%BD%94%EB%94%A9&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;incompatible-encoding-regexp-match&quot;&gt;incompatible encoding regexp match&lt;/h3&gt;

&lt;p&gt;로컬에서 구동 시 아래와 같은 에러가 출력될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;jekyll 3.8.5 | Error:  incompatible encoding regexp match (CP949 regexp with UTF-8 string)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이는 jekyll 프로젝트 경로 상에 한글명의 폴더가 들어가 있는 경우이다. 한글을 바꿔주거나 다른 경로로 이동하여 다시 실행해보자.&lt;/p&gt;

&lt;h3 id=&quot;there-was-an-error-parsing-gemfile&quot;&gt;There was an error parsing `Gemfile`&lt;/h3&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;[!] There was an error parsing `Gemfile`: There are no gemspecs at [folder]. Bundler cannot continue.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;from &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;folder]/Gemfile:2
&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-------------------------------------------&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; &amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;gemspec &lt;span class=&quot;c&quot;&gt;#  source &quot;https://rubygems.org&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-------------------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bundle install&lt;/strong&gt; 시 Gemfile이 없거나 파일이 제대로 작성되어 있지 않을 때 위와 같은 에러가 출력될 수 있다. Gemfile이 이상이 없는지 확인해보자. 참고용으로 현재 이 블로그의 Gemfile 내용을 아래에 작성해 둘테니 잘 안된다면 복사해서 붙여넣어보자.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;github-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;group: :jekyll_plugins&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tzinfo-data&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wdm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.1.0&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;win_platform?&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# If you have any plugins, put them here!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-sitemap&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-gist&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-feed&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jemoji&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-algolia&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-include-cache&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>Simplehan</name>
        
        
      </author>

      

      
        <category term="github pages" />
      
        <category term="jekyll" />
      
        <category term="minimal-mistakes" />
      
        <category term="git" />
      
        <category term="ruby" />
      

      
        <summary type="html">블로그를 시작하였다. 처음엔 티스토리를 이용하여 블로그를 개설하려 했으나 github에서 무료로 제공하는 github pages 호스팅 서비스가 있길래 이를 이용해보기로 했다. github pages는 jekyll로 동작하기 때문에 jekyll의 공개된 테마 중 인기가 많은 minimal-mistakes 테마를 이용하였다.</summary>
      

      
      
    </entry>
  
</feed>
