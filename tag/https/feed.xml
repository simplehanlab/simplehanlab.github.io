<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://simplehanlab.github.io/tag/https/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://simplehanlab.github.io/" rel="alternate" type="text/html" />
  <updated>2021-09-13T08:01:44+00:00</updated>
  <id>https://simplehanlab.github.io/tag/https/feed.xml</id>

  
  
  

  
    <title type="html">SimpleHan Lab | </title>
  

  
    <subtitle>기술 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Nginx + Tomcat8 연동</title>
      <link href="https://simplehanlab.github.io/ssl-nginx-tomcat" rel="alternate" type="text/html" title="Nginx + Tomcat8 연동" />
      <published>2019-07-30T11:00:00+00:00</published>
      <updated>2019-07-30T11:00:00+00:00</updated>
      <id>https://simplehanlab.github.io/ssl-nginx-tomcat</id>
      <content type="html" xml:base="https://simplehanlab.github.io/ssl-nginx-tomcat">&lt;p&gt;지난 시간에는 nginx 에 let’s encrypt 를 이용하여 무료 SSL 인증서를 적용해 보았다. 이번 시간에는 SSL 인증서로 https 접속이 가능해진 nginx 에 톰캣을 연결해 보도록 할 것이다.&lt;/p&gt;

&lt;p&gt;nginx 설치 방법은 &lt;a href=&quot;https://simplehanlab.github.io/ssl/ssl-letsencrypt/&quot;&gt;Letsencrypt + Nginx SSL인증서(HTTPS) 적용&lt;/a&gt; 포스팅에서 nginx 설치 부분을 참고&lt;/p&gt;

&lt;h3 id=&quot;환경&quot;&gt;환경&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 18.04&lt;/li&gt;
  &lt;li&gt;apt-get 을 통해 설치한 Nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nginx-와-tomcat-연동&quot;&gt;Nginx 와 Tomcat 연동&lt;/h2&gt;

&lt;p&gt;(톰캣이 설치&amp;amp;실행 되어 있다는 가정 하에 진행)&lt;/p&gt;

&lt;p&gt;Nginx 의 설정 파일을 수정 ( 여기서는 /etc/nginx/site-available/default 파일을 수정)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim /etc/nginx/site-available/default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;server 블록 상단에 톰캣 서버에 대한 경로를 지정해 준 뒤 server 블록 내부에 location 설정 부분 수정 - 80포트와 443 포트에 대해 톰캣으로 연결되도록 설정을 수정한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;c&quot;&gt;# 톰캣 위치를 지정&lt;/span&gt;
upstream tomcat &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	ip_hash&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	server 127.0.0.1:8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 80 포트에 대한 설정 &lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        root /var/www/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Add index.php to the list if you are using PHP&lt;/span&gt;
        index index.html index.htm index.nginx-debian.html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        server_name _&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        charset utf-8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# First attempt to serve request as file, then&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# as directory, then fall back to displaying a 404.&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# try_files $uri $uri/ =404;  // css 가 로드되지 않을수 있으므로 주석처리&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# proxy 설정 추가&lt;/span&gt;
                proxy_pass http://tomcat&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; //tomcat 서버 지정
                proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
                proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 ... 중략
 
 &lt;span class=&quot;c&quot;&gt;# 443 포트에 대한 설정&lt;/span&gt;
 server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen 443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        server_name _&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        ssl_certificate /etc/letsencrypt/live/8e7dcf95.ngrok.io/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        ssl_certificate_key /etc/letsencrypt/live/8e7dcf95.ngrok.io/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# First attempt to serve request as file, then&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# as directory, then fall back to displaying a 404.&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# try_files $uri $uri/ =404;  // css 가 로드되지 않을수 있으므로 주석처리&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# proxy 설정 추가&lt;/span&gt;
                proxy_pass http://tomcat&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;default 파일 내 location 설정 안에&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proxy_pass http://tomcat&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 구문을 추가하면 된다.&lt;/p&gt;

&lt;p&gt;파일을 저장한 뒤 nginx service 재시작&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 서버 ip로 접속시에 기존 nginx 페이지가 아닌 톰캣 서버 index 페이지가 나타나는 것을 확인 할 수 있을 것이다. (http, https 둘다 접속시도 해보자)&lt;/p&gt;

&lt;p&gt;http 접속&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\nginx-tomcat\nginx_tomcat_http.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https 접속&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\nginx-tomcat\nginx_tomcat_https.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 상단 바 주의 요함부분을 클릭해보면 인증서가 적용되어 있을 것이다.&lt;/p&gt;

&lt;p&gt;서버 재시작후 웹 브라우저에서 접속을 실행하면 500번대 에러가 날 수 있다. 이럴땐 톰캣 서버가 활성화 되어 있는지 확인해 본 뒤 다시 접속을 해보자&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Simplehan</name>
        
        
      </author>

      

      
        <category term="https" />
      
        <category term="SSL" />
      
        <category term="letsencrypt" />
      
        <category term="secure" />
      

      
        <summary type="html">지난 시간에는 nginx 에 let’s encrypt 를 이용하여 무료 SSL 인증서를 적용해 보았다. 이번 시간에는 SSL 인증서로 https 접속이 가능해진 nginx 에 톰캣을 연결해 보도록 할 것이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Letsencrypt + Nginx SSL인증서(HTTPS) 적용</title>
      <link href="https://simplehanlab.github.io/ssl-letsencrypt" rel="alternate" type="text/html" title="Letsencrypt + Nginx SSL인증서(HTTPS) 적용" />
      <published>2019-07-30T11:00:00+00:00</published>
      <updated>2019-07-30T11:00:00+00:00</updated>
      <id>https://simplehanlab.github.io/ssl-letsencrypt</id>
      <content type="html" xml:base="https://simplehanlab.github.io/ssl-letsencrypt">&lt;h3 id=&quot;환경&quot;&gt;환경&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 18.04&lt;/li&gt;
  &lt;li&gt;apt-get 을 통해 설치한 Nginx&lt;/li&gt;
  &lt;li&gt;도메인 ( 이번 과정에서는 도메인이 없는 경우를 대비 ngrok 을 이용한 임시 도메인 사용 )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-encrypt&quot;&gt;Let’s Encrypt&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹 사이트에 HTTPS (SSL / TLS)를 사용하기 위해 필요한 디지털 인증서를 무료로 제공&lt;/li&gt;
  &lt;li&gt;만료 기간이 90일, 만료 기간전에 수동으로 인증서를 갱신 또는 crontab, certbot auto 를 활용한 자동 갱신&lt;/li&gt;
  &lt;li&gt;자세한 내용은  &lt;a href=&quot;https://letsencrypt.org/about/&quot;&gt; Let’s Encrypt 공식 사이트&lt;/a&gt; 에서 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nginx-설치&quot;&gt;Nginx 설치&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;80 포트를 사용하는 또다른 서비스가 존재한다면 서비스를 중지하거나 삭제 한 후 nginx 설치&lt;/p&gt;

&lt;p&gt;설치완료 후 서버  포트 번호로 웹 브라우저에서 접속 시 nginx 화면이 나오는지 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\start-nginx.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nginx 화면이 나오지 않을 시에는&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어로 nginx 를 재시작 해본 뒤 다시 웹 브라우저에서 접속시도 nginx index 화면이 제대로 나온다면 이제 Let’s Encrypt 를 이용하여 SSL 인증서를 받아보자&lt;/p&gt;

&lt;h2 id=&quot;certbot--설치&quot;&gt;certbot  설치&lt;/h2&gt;

&lt;p&gt;apt-get 에 certbot 저장소 추가&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:certbot/certbot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;패키지 목록을 업데이트 한 후에 certbot 을 설치&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSL 인증을 하기에 앞서 구매한 도메인이 없다면, certbot 에서 해당 서버에 접근을 할 수가 없어 인증이 되지 않는다. 잠시 테스트용으로 ngrok 을 사용하여 임시 도메인을 사용해 테스트를 해보자&lt;/p&gt;

&lt;h2 id=&quot;ngrok-설치-및-실행&quot;&gt;Ngrok 설치 및 실행&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dashboard.ngrok.com/get-started&quot;&gt;ngrok 홈페이지&lt;/a&gt;에 들어가 간단한 회원가입 절차를 진행한 후에 운영체제에 맞는 ngrok 을 다운 받은 뒤 매뉴얼에 따라 ngrok을 실행해 보자 (이번 포스트 환경은 ubuntu 64bit 이므로 linux 를 다운로드한다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\download-ngrok.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;③ 번 까지 진행을 했다면 ngrok을 압춘을 푼 폴더에서&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./ngrok http http://localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;를 실행 해보자 그러면 이러한 화면이 나올 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\exec-ngrok.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fowarding 부분에 있는 http 주소를 복사( CTRL + C 는 ngrok을 중지시키는 단축키이므로 GUI 가 있는 운영체제라면 마우스 오른쪽 클릭을 활용하거나 직접 주소를 타이핑 하자!!!) 하여 웹 브라우저에서 들어가보면 nginx index 창이 뜨는걸 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 ngrok을 실행 시켜 놓은 상태에서 새로운 터미널 창을 연뒤 certbot 을 이용해 인증서를 발급해 보도록 하자&lt;/p&gt;

&lt;h2 id=&quot;lets-encrypt-인증서-발급&quot;&gt;Let’s Encrypt 인증서 발급&lt;/h2&gt;

&lt;p&gt;설치한 certbot 을 이용하여 인증서를 발급 받을 것이다. 여기에선 인증서만 필요하므로 certonly 형식으로 인증서만 서버에 받아 오도록 진행 해보자&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot certonly &lt;span class=&quot;nt&quot;&gt;--nginx&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;도메인 주소]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저 도메인 주소에 ngrok 으로 생성한 도메인을 넣어 주도록 하자&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot certonly &lt;span class=&quot;nt&quot;&gt;--nginx&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 8e7dcf95.ngrok.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도메인 주소 부분에 http 또는 ‘ / ‘ 가 포함되지 않도록 주의 하자&lt;/p&gt;

&lt;p&gt;명령어를 실행하면 서버 인증이 실행 되고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\ssl-certbot.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulation! 이라는 단어와 함께 인증이 완료되었다고 나올 것이다.&lt;/p&gt;

&lt;p&gt;인증 완료 문구에서 보면&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/letsencrypt/live/8e7dcf95.ngrok.io/fullchain.pem
/etc/letsencrypt/live/8e7dcf95.ngrok.io/privkey.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;같은 경로가 보일 텐데 이 경로가 인증서가 저장되어진 경로이다. 해당 경로로 들어가 인증 된 파일을 확인해 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\certfile.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;총 4가지의 파일이 존재 할 것이다. 이중 fullchain.pem 과 privkey.pem 두가지만 nginx SSL 설정에 사용할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;nginx-ssl-설정&quot;&gt;Nginx SSL 설정&lt;/h2&gt;

&lt;p&gt;Nginx 의 설정 파일을 수정 ( 여기서는 /etc/nginx/site-available/default 파일을 수정)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/nginx/site-available/default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파일 내부를 확인해 보면 80 port 설정에 대한 server 블록이 존재할 것이다. 그 server 블록 아래에 443(SSL) port 에 대한 server 블록을 추가해 주자&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 80 포트의 대한 설정은 수정 하지 않는다. &lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    ...
        listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        root /var/www/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        index index.html index.htm index.nginx-debian.html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        server_name _&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        charset utf-8&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# First attempt to serve request as file, then&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# as directory, then fall back to displaying a 404.&lt;/span&gt;
                try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;404&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 443 포트를 설정하기 위한 server 블록 추가&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen 443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        ssl on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; // ssl 을 활성화
        server_name _&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        ssl_certificate /etc/letsencrypt/live/8e7dcf95.ngrok.io/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        ssl_certificate_key /etc/letsencrypt/live/8e7dcf95.ngrok.io/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# First attempt to serve request as file, then&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# as directory, then fall back to displaying a 404.&lt;/span&gt;
                 try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;404&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ssl on 을 통해 SSL 을 활성화 시키고&lt;/p&gt;

&lt;p&gt;ssl_certificate 에 발급받은 인증서 중 fullchain.pem 이 위치한 경로를 지정해 주고&lt;/p&gt;

&lt;p&gt;ssl_certificate_key 에 발급받은 인증서 중 privkey.pem 이 위치한 경로를 지정해 준다.&lt;/p&gt;

&lt;p&gt;파일을 저장 하고 나온 뒤 nginx 서버를 재시작 하자!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버 재시작이 정상적으로 완료 되면 ngrok 에서 발급 받은 주소가 아닌 서버 포트 번호를 통해 HTTPS 보안 접속을 시도해 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\connect-https-port.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;연결이 비공개로 설정 되어 있다는 화면이 나올 것이다. 당황하지 말고 하단 고급탭을 선택 후 “192.168.107.128(안전하지 않음)(으)로 이동” 을 클릭해 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\connect-https-port-result.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;nginx index 화면이 정상적으로 나올 것이다.&lt;/p&gt;

&lt;p&gt;여기서 인증서가 적용이 잘 되었는지 확인을 하기 위해 웹 브라우저 주소검색줄 부분 왼쪽을 보면 주의요함 이라는 글씨가 보일 것이다. 이부분을 클릭한뒤 나오는 메뉴 중에서 인증서 탭을 선택해 보자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\check-cert.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인증서 정보가 나오게 될 텐데 여기서 발급 대상은 ngrok을 통해 생성한 도메인 주소가, 발급자는 Let’s Encrypt 가 유효기간은 90일이 설정되어 보일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\built\images\letsencrypt\check-cert2.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음 게시글에서는 SSL 설정이 완료된 Nginx 에 Tomcat 을 연동하는 방법을 설명해 보겠다.&lt;/p&gt;

&lt;p&gt;바로가기: &lt;a href=&quot;https://simplehanlab.github.io/ssl/ssl-nginx-tomcat/&quot;&gt;Nginx + Tomcat8 연동&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Simplehan</name>
        
        
      </author>

      

      
        <category term="https" />
      
        <category term="SSL" />
      
        <category term="letsencrypt" />
      

      
        <summary type="html">환경</summary>
      

      
      
    </entry>
  
</feed>
